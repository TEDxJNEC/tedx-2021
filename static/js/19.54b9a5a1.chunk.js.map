{"version":3,"sources":["assets/Login.svg","components/dashboard/AdminLogin.jsx","pages/admin/login.jsx"],"names":["ErrorMessage","styled","div","Help","Link","MessageFlex","AdminLogin","useContext","AuthContext","dispatch","state","useState","username","password","info","setinfo","errors","setError","EVENT_USER_LOGIN","API_ROUTES","STREAM","ROUTES","history","useHistory","inputEvent","event","target","value","name","preVal","className","src","img","alt","onSubmit","preventDefault","payload","axios","post","process","then","resp","localStorage","setItem","data","token","type","eventToken","user","email","push","catch","err","console","log","required","autoComplete","onChange","to","Login"],"mappings":"6LAAe,G,OAAA,IAA0B,mC,8DCUnCA,EAAeC,IAAOC,IAAV,iEAQZC,EAAOF,YAAOG,IAAPH,CAAH,oEAIJI,EAAcJ,IAAOC,IAAV,iFA8GFI,EA1GI,WAAM,MAEKC,qBAAWC,KAAxBC,GAFQ,EAEfC,MAFe,EAERD,UAFQ,EAGCE,mBAAS,CAC/BC,SAAU,GACVC,SAAU,KALW,mBAGhBC,EAHgB,KAGVC,EAHU,OAQIJ,mBAAS,IARb,mBAQhBK,EARgB,KAQRC,EARQ,KASfC,EAAqBC,IAArBD,iBACAE,EAAWC,IAAXD,OACFE,EAAUC,cAEVC,EAAa,SAACC,GAClBR,EAAS,IADmB,MAIJQ,EAAMC,OAAtBC,EAJoB,EAIpBA,MAAOC,EAJa,EAIbA,KAEfb,GAAQ,SAACc,GACP,MAAa,aAATD,EACK,CACLhB,SAAUe,EACVd,SAAUgB,EAAOhB,UAGR,aAATe,EACK,CACLhB,SAAUiB,EAAOjB,SACjBC,SAAUc,GAGP,SA+BX,OACE,sBAAKG,UAAU,QAAf,UACE,qBAAKA,UAAU,SAAf,SACE,qBAAKC,IAAKC,EAAKF,UAAU,QAAQG,IAAI,aAGvC,uBAAMC,SAjCW,SAACT,GACpBA,EAAMU,iBACN,IAAMC,EAAU,CACdxB,SAAUE,EAAKF,SACfC,SAAUC,EAAKD,UAEjBwB,IACGC,KADH,UACWC,2BADX,YACgDrB,GAAoBkB,GACjEI,MAAK,SAACC,GACLC,aAAaC,QAAQ,aAAcF,EAAKG,KAAKC,OAC7CpC,EAAS,CACPqC,KAAM,cACNV,QAAS,CACPW,WAAYN,EAAKG,KAAKC,SAG1BH,aAAaC,QAAQ,aAAcF,EAAKG,KAAKI,KAAKC,OAClD3B,EAAQ4B,KAAK9B,MAGd+B,OAAM,SAACC,GAENC,QAAQC,IAAIF,GACZnC,EAAS,2BAUX,UACE,6CACA,sBAAKa,UAAU,cAAf,UACE,uBACEgB,KAAK,OACLlB,KAAK,WACL2B,SAAS,WACTC,aAAa,MACbC,SAAUjC,EACVG,MAAOb,EAAKF,WAEd,+CAEF,sBAAKkB,UAAU,cAAf,UACE,uBACEgB,KAAK,WACLlB,KAAK,WACL2B,SAAS,WACTE,SAAUjC,EACVG,MAAOb,EAAKD,WAEd,+CAEF,wBAAQiC,KAAK,SAAb,oBAKA,eAACzC,EAAD,WACE,cAACL,EAAD,UAAegB,IACf,cAACb,EAAD,CAAMuD,GAAG,QAAT,4BC9GKC,UAVD,WACZ,OACE,mCACE,cAAC,IAAD,UACE,cAAC,EAAD","file":"static/js/19.54b9a5a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Login.8cabaaef.svg\";","import React, { useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport 'common/admin_login.scss';\nimport img from 'assets/Login.svg';\nimport axios from 'axios';\nimport API_ROUTES from 'constants/api';\nimport { useHistory, Link } from 'react-router-dom';\nimport ROUTES from 'constants/routes';\nimport { AuthContext } from 'routes';\n\nconst ErrorMessage = styled.div`\n  color: red;\n  margin: 12px auto;\n`;\n// const Disclaimer = styled.div`\n//   color: #ccc;\n//   font-size: 12px;\n// `;\nconst Help = styled(Link)`\n  color: #f6c90e;\n  margin-top: 24px;\n`;\nconst MessageFlex = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\nconst AdminLogin = () => {\n  // eslint-disable-next-line no-unused-vars\n  const { state, dispatch } = useContext(AuthContext);\n  const [info, setinfo] = useState({\n    username: '',\n    password: '',\n  });\n\n  const [errors, setError] = useState('');\n  const { EVENT_USER_LOGIN } = API_ROUTES;\n  const { STREAM } = ROUTES;\n  const history = useHistory();\n\n  const inputEvent = (event) => {\n    setError('');\n    // console.log(event.target.name);\n    // console.log(event.target.value);\n    const { value, name } = event.target;\n\n    setinfo((preVal) => {\n      if (name === 'username') {\n        return {\n          username: value,\n          password: preVal.password,\n        };\n      }\n      if (name === 'password') {\n        return {\n          username: preVal.username,\n          password: value,\n        };\n      }\n      return null;\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const payload = {\n      username: info.username,\n      password: info.password,\n    };\n    axios\n      .post(`${process.env.REACT_APP_BACKEND_URL}/${EVENT_USER_LOGIN}`, payload)\n      .then((resp) => {\n        localStorage.setItem('eventToken', resp.data.token);\n        dispatch({\n          type: 'EVENT_LOGIN',\n          payload: {\n            eventToken: resp.data.token,\n          },\n        });\n        localStorage.setItem('eventEmail', resp.data.user.email);\n        history.push(STREAM);\n      })\n\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n        setError('Invalid Credentials');\n      });\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"design\">\n        <img src={img} className=\"image\" alt=\"design\" />\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <h2>Event LogIn</h2>\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            name=\"username\"\n            required=\"required\"\n            autoComplete=\"off\"\n            onChange={inputEvent}\n            value={info.username}\n          />\n          <span>Username</span>\n        </div>\n        <div className=\"input-group\">\n          <input\n            type=\"Password\"\n            name=\"password\"\n            required=\"required\"\n            onChange={inputEvent}\n            value={info.password}\n          />\n          <span>Password</span>\n        </div>\n        <button type=\"submit\">LOG IN</button>\n        {/* <Disclaimer>\n          Ios users: Kindly turn private browsing off before logging in as its\n          known to cause issues\n        </Disclaimer> */}\n        <MessageFlex>\n          <ErrorMessage>{errors}</ErrorMessage>\n          <Help to=\"/help\">Help</Help>\n        </MessageFlex>\n      </form>\n    </div>\n  );\n};\n\nexport default AdminLogin;\n","import React from 'react';\n// import styled from 'styled-components';\nimport DefaultLayout from '../../layouts';\nimport AdminLogin from '../../components/dashboard/AdminLogin';\n\nconst Login = () => {\n  return (\n    <>\n      <DefaultLayout>\n        <AdminLogin />\n      </DefaultLayout>\n    </>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}